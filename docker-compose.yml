version: "3"

volumes:
  nfcore_stats_data:
  nfcore_stats_redis:

services:
  nfcore_stats_redis:
    container_name: nfcore_stats_redis
    build:
      context: .
      dockerfile: ./dockerfiles/DockerfileRedis
    volumes:
      - nfcore_stats_redis:/data
    ports:
      - "127.0.0.1:6379:6379"
    networks:
      - nfcore_stats

  nfcore_stats_db:
    container_name: nfcore_stats_db
    image: "postgres:latest"
    restart: unless-stopped
    environment:
      PGDATA: /data/postgres
    volumes:
      - nfcore_stats_data:/data/postgres
      # For additional initialization add one or more *.sql, *.sql.gz, or *.sh scripts under /docker-entrypoint-initdb.d. After the entrypoint calls initdb to create the default postgres user and database, it will run any *.sql files, run any executable *.sh scripts, and source any non-executable *.sh scripts found in that directory to do further initialization before starting the service
      # - ./config/create_tables.sql:/docker-entrypoint-initdb.d/create_tables.sql
    ports:
      - "127.0.0.1:5432:5432"
    networks:
      - nfcore_stats
    env_file:
      - ./config/.env
    healthcheck:
      # $$ such that the variables are not parsed by Docker, but only inside the container where they are set from the .env file.
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  nfcore_stats_api:
    container_name: nfcore_stats_api
    build:
      context: .
      dockerfile: ./dockerfiles/DockerfilePython
    depends_on:
      nfcore_stats_db:
        condition: service_healthy
      nfcore_stats_redis:
        condition: service_started
      nfcore_stats_scheduler:
        condition: service_started
    restart: always
    volumes:
      - ./backend:/mnt/backend
    env_file:
      - ./config/.env
    ports:
      - "127.0.0.1:8000:8000"
    tty: true #for debugging with pdb
    stdin_open: true # docker container attach nfcore_stats_api
    networks:
      - nfcore_stats
    command: /mnt/backend/run/start_api.sh

  nfcore_stats_scheduler:
    container_name: nfcore_stats_scheduler
    build:
      context: .
      dockerfile: ./dockerfiles/DockerfilePython
    depends_on:
      nfcore_stats_db:
        condition: service_healthy
      nfcore_stats_redis:
        condition: service_started
    networks:
      - nfcore_stats
    volumes:
      - ./backend:/mnt/backend
    env_file:
      - ./config/.env
    command: /mnt/backend/run/start_scheduler.sh
networks:
  nfcore_stats:
